---
import {
  getCollection,
  type CollectionEntry,
  type CollectionKey,
  type ContentEntryMap,
} from "astro:content";

import config from "@/config/config.json";
import languages from "@/config/language.json";

export const getSinglePage = async <C extends CollectionKey>(
  collectionName: C,
  lang: keyof ContentEntryMap | undefined,
  subCollectionName?: string
): Promise<CollectionEntry<C>[]> => {
  const { default_language } = config.settings;

  const selectedLanguageCode = lang || default_language;

  const language = languages.find(
    (l: any) => l.languageCode === selectedLanguageCode
  );

  if (!language) {
    throw new Error("Language not found");
  }

  const { contentDir } = language;

  const path = subCollectionName
    ? `${contentDir}/${subCollectionName}`
    : contentDir;

  const pages: CollectionEntry<C>[] = (await getCollection(
    collectionName as any,
    ({ id }: any) => {
      return id.startsWith(path) && !id.endsWith("-index");
    }
  )) as CollectionEntry<C>[];

  // @ts-ignore
  const removeDrafts = pages.filter((data) => !data.data.draft);

  return removeDrafts;
};

export const getListPage = async <C extends CollectionKey>(
  collectionName: C,
  lang: keyof ContentEntryMap | undefined
): Promise<CollectionEntry<C>[]> => {
  const { default_language } = config.settings;
  const selectedLanguageCode = lang || default_language;
  const language = languages.find(
    (l: any) => l.languageCode == selectedLanguageCode
  );

  if (!language) {
    throw new Error("Language not found");
  }

  const { contentDir } = language;

  const pages: CollectionEntry<C>[] = (await getCollection(
    collectionName as any,
    ({ id }: any) => {
      return id.startsWith(contentDir);
    }
  )) as CollectionEntry<C>[];

  // Sort the pages array
  return pages.sort((a, b) => {
    // Put -index at the top
    if (a.id.endsWith("-index")) return -1;
    if (b.id.endsWith("-index")) return 1;

    // For other posts, sort by their numeric part
    const aNum = parseInt(a.id.match(/\d+/)?.[0] || "0");
    const bNum = parseInt(b.id.match(/\d+/)?.[0] || "0");
    return aNum - bNum;
  });
};
---
